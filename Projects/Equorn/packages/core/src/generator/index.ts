/**
 * Equorn Generator module
 * Handles generating output from seed files.
 * 
 * NOTE: This file is maintained for backward compatibility.
 * New code should import from '../generators' instead.
 * 
 * @deprecated Use modules from '../generators' directory instead.
 */

// Import required types
import { SeedConfig, EntityConfig, EnvironmentConfig, GenerationOptions } from '../types.js';
import * as fs from 'fs-extra';
import * as path from 'node:path';
import { parseSeedFile } from '../parser.js';

// Import the modular generators from the generators module
import {
  generateGodotProject as godotGenerator,
  generateUnityProject as unityGenerator,
  generateWebProject as webGenerator,
  generateDocsProject as docsGenerator
} from '../generators/index.js';

// Re-export all generators from new modular structure
export * from '../generators/index.js';

/**
 * Generate project content from a seed file
 * @param seedPath Path to the YAML or JSON seed file
 * @param options Generation options including target platform and output directory
 */
export async function generateFromSeed(
  seedPath: string,
  options: GenerationOptions
): Promise<void> {
  // Parse the seed file
  const seed = await parseSeedFile(seedPath);
  
  // Ensure output directory exists
  const outputDir = options.outputDir || path.join(process.cwd(), 'output', options.target);
  await fs.ensureDir(outputDir);
  
  if (options.verbose) {
    console.log(`Parsed seed file: ${seedPath}`);
    console.log(`Target: ${options.target}`);
    console.log(`Output directory: ${outputDir}`);
  }
  
  // Generate project based on target
  switch (options.target) {
    case 'godot':
      await godotGenerator(seed, outputDir, options.verbose);
      break;
    case 'unity':
      await unityGenerator(seed, outputDir, options.verbose);
      break;
    case 'web':
      await webGenerator(seed, outputDir, options.verbose);
      break;
    case 'docs':
      await docsGenerator(seed, outputDir, options.verbose);
      break;
    default:
      throw new Error(`Invalid target: ${options.target}`);
  }
  
  if (options.verbose) {
    console.log(`Project generated successfully in ${outputDir}`);
  }
}

/**
 * Generate a Godot project from a seed
 */
async function generateGodotProject(seed: SeedConfig, outputDir: string, verbose?: boolean): Promise<void> {
  // Determine project directory name from seed name
  const projectName = seed.name.toLowerCase().replace(/\s+/g, '-');
  const projectDir = path.join(outputDir, `${projectName}-godot`);
  
  // Create project structure
  await fs.ensureDir(projectDir);
  await fs.ensureDir(path.join(projectDir, 'scenes'));
  await fs.ensureDir(path.join(projectDir, 'scripts'));
  await fs.ensureDir(path.join(projectDir, 'assets'));
  
  if (verbose) {
    console.log(`Creating Godot project: ${projectName}`);
    console.log(`Project directory: ${projectDir}`);
  }

  // Generate project.godot file
  const projectConfig = generateGodotProjectConfig(seed);
  await fs.writeFile(path.join(projectDir, 'project.godot'), projectConfig);
  
  // Generate main scene
  const mainScene = generateGodotMainScene(seed);
  await fs.writeFile(path.join(projectDir, 'scenes', 'main.tscn'), mainScene);
  
  // Generate entity script if we have an entity
  if (seed.entity) {
    const entityScript = generateGodotEntityScript(seed.entity);
    await fs.writeFile(
      path.join(projectDir, 'scripts', `${seed.entity.name.toLowerCase().replace(/\s+/g, '_')}.gd`),
      entityScript
    );
  }
  
  // Generate environment scene if we have an environment
  if (seed.environment) {
    const envScene = generateGodotEnvironmentScene(seed.environment);
    await fs.writeFile(
      path.join(projectDir, 'scenes', `${seed.environment.name.toLowerCase().replace(/\s+/g, '_')}.tscn`),
      envScene
    );
  }

  // Generate README
  await fs.writeFile(
    path.join(projectDir, 'README.md'),
    `# ${seed.name} - Godot Project
${seed.description}

## Overview
- Version: ${seed.version}
- Author: ${seed.author}
- Generated by Equorn v0.1.0

## Getting Started
1. Open this project in Godot Engine (4.0+)
2. Open the main scene in scenes/main.tscn
3. Press F5 to run the project
`
  );
  
  if (verbose) {
    console.log(`Godot project generated successfully at ${projectDir}`);
  }
}

/**
 * Generate a Unity project from a seed
 */
async function generateUnityProject(seed: SeedConfig, outputDir: string, verbose?: boolean): Promise<void> {
  // Determine project directory name
  const projectName = seed.name.toLowerCase().replace(/\s+/g, '-');
  const projectDir = path.join(outputDir, `${projectName}-unity`);
  
  // Create project structure
  await fs.ensureDir(projectDir);
  await fs.ensureDir(path.join(projectDir, 'Assets'));
  await fs.ensureDir(path.join(projectDir, 'Assets', 'Scripts'));
  await fs.ensureDir(path.join(projectDir, 'Assets', 'Scenes'));
  await fs.ensureDir(path.join(projectDir, 'Assets', 'Resources'));
  await fs.ensureDir(path.join(projectDir, 'Assets', 'Prefabs'));
  
  if (verbose) {
    console.log(`Creating Unity project: ${projectName}`);
    console.log(`Project directory: ${projectDir}`);
  }

  // Generate project settings
  await fs.writeFile(
    path.join(projectDir, 'ProjectSettings.txt'),
    `ProjectName: ${seed.name}
ProjectVersion: ${seed.version}
Description: ${seed.description}
`
  );
  
  // Generate main scene file (simplified for this implementation)
  await fs.writeFile(
    path.join(projectDir, 'Assets', 'Scenes', 'MainScene.unity'),
    `%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!29 &1
OcclusionCullingSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_OcclusionBakeSettings:
    smallestOccluder: 5
    smallestHole: 0.25
    backfaceThreshold: 100
  m_SceneGUID: 00000000000000000000000000000000
  m_OcclusionCullingData: {fileID: 0}
--- !u!104 &2
RenderSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 9
  m_Fog: 0
  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}
  m_FogMode: 3
--- !u!157 &3
LightmapSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 12
  m_GIWorkflowMode: 1
  m_GISettings:
    serializedVersion: 2
    m_BounceScale: 1
    m_IndirectOutputScale: 1
    m_AlbedoBoost: 1
    m_EnvironmentLightingMode: 0
    m_EnableBakedLightmaps: 1
    m_EnableRealtimeLightmaps: 0
`
  );
  
  // Generate entity script if we have an entity
  if (seed.entity) {
    const entityScript = generateUnityEntityScript(seed.entity);
    await fs.writeFile(
      path.join(projectDir, 'Assets', 'Scripts', `${seed.entity.name.replace(/\s+/g, '')}.cs`),
      entityScript
    );
  }
  
  // Generate environment script if we have an environment
  if (seed.environment) {
    const envScript = generateUnityEnvironmentScript(seed.environment);
    await fs.writeFile(
      path.join(projectDir, 'Assets', 'Scripts', `${seed.environment.name.replace(/\s+/g, '')}.cs`),
      envScript
    );
  }

  // Generate a manager script to tie everything together
  const managerScript = generateUnityManagerScript(seed);
  await fs.writeFile(
    path.join(projectDir, 'Assets', 'Scripts', `${projectName}Manager.cs`),
    managerScript
  );

  // Generate Assembly Definition file
  await fs.writeFile(
    path.join(projectDir, 'Assets', 'Scripts', 'Equorn.asmdef'),
    `{
    "name": "Equorn.${projectName}",
    "rootNamespace": "Equorn",
    "references": [],
    "includePlatforms": [],
    "excludePlatforms": []
}`
  );

  // Generate README
  await fs.writeFile(
    path.join(projectDir, 'README.md'),
    `# ${seed.name} - Unity Project
${seed.description}

## Overview
- Version: ${seed.version}
- Author: ${seed.author}
- Generated by Equorn v0.1.0

## Getting Started
1. Open this folder in Unity Hub as a project
2. Open the main scene from Assets/Scenes/MainScene.unity
3. Press Play to run the project

## Project Structure
- Assets/
  - Scenes/ - Contains the main scene and any additional scenes
  - Scripts/ - C# scripts for all entities and behaviors
  - Resources/ - Assets and resources for the project
  - Prefabs/ - Reusable objects and components
`
  );
  
  if (verbose) {
    console.log(`Unity project generated successfully at ${projectDir}`);
  }
}

/**
 * Generate Godot project configuration file content
 */
function generateGodotProjectConfig(seed: SeedConfig): string {
  return `; Generated Godot Engine project file
; Equorn Version: 0.1.0
config_version=5

[application]
config/name="${seed.name}"
config/description="${seed.description}"
config/version="${seed.version}"
run/main_scene="res://scenes/main.tscn"

[rendering]
environment/default_environment="res://default_env.tres"
`;
}

/**
 * Generate Godot main scene file content
 */
function generateGodotMainScene(seed: SeedConfig): string {
  const entityReference = seed.entity ? 
    `[ext_resource path="res://scripts/${seed.entity.name.toLowerCase().replace(/\s+/g, '_')}.gd" type="Script" id=1]` : '';
  const environmentReference = seed.environment ? 
    `[ext_resource path="res://scenes/${seed.environment.name.toLowerCase().replace(/\s+/g, '_')}.tscn" type="PackedScene" id=2]` : '';

  return `[gd_scene format=2]

${entityReference}
${environmentReference}

[node name="Main" type="Node"]

[node name="Title" type="Label" parent="."]
margin_left = 40
margin_top = 40
margin_right = 600
margin_bottom = 80
text = "${seed.name}"

[node name="Description" type="Label" parent="."]
margin_left = 40
margin_top = 100
margin_right = 600
margin_bottom = 200
text = "${seed.description}"

${seed.entity ? `[node name="${seed.entity.name}" type="Node" parent="."]
script = ExtResource( 1 )
` : ''}

${seed.environment ? `[node name="${seed.environment.name}" parent="." instance=ExtResource( 2 )]
` : ''}
`;
}

/**
 * Generate Godot entity script file content
 */
function generateGodotEntityScript(entity: EntityConfig): string {
  const powersFunctions = entity.powers ? entity.powers.map((power: { name: string; description: string }) => {
    const funcName = power.name.toLowerCase().replace(/\s+/g, '_');
    return `func ${funcName}():
	print("Using power: ${power.name}")
	# ${power.description}
	pass
`;
  }).join('\n') : '';

  return `extends Node

# ${entity.name}
# Type: ${entity.type}
# Alignment: ${entity.alignment}

# Properties
export var health = 100
export var energy = 100

# Lore
# ${entity.lore?.origin || 'Origin unknown'}
# ${entity.lore?.purpose || 'Purpose unknown'}

func _ready():
	print("${entity.name} initialized")

${powersFunctions}

func interact():
	print("${entity.name} interacted with player")
	return "${entity.type} - ${entity.alignment}"
`;
}

/**
 * Generate Unity entity script (C#)
 */
function generateUnityEntityScript(entity: EntityConfig): string {
  const powerMethods = entity.powers ? entity.powers.map((power: { name: string; description: string }) => {
    const methodName = power.name.replace(/\s+/g, '');
    return `    /// <summary>
    /// ${power.description}
    /// </summary>
    public void ${methodName}()
    {
        Debug.Log("Using power: ${power.name}");
        // TODO: Implement power effect
    }`;
  }).join('\n\n') : '';

  return `using UnityEngine;
using System.Collections;

namespace Equorn
{
    /// <summary>
    /// ${entity.name} - ${entity.type}
    /// Alignment: ${entity.alignment}
    /// </summary>
    public class ${entity.name.replace(/\s+/g, '')} : MonoBehaviour
    {
        [Header("Stats")]
        public int health = 100;
        public int energy = 100;
        
        [Header("Lore")]
        [TextArea]
        public string origin = "${entity.lore?.origin.replace(/"/g, '\"') || 'Origin unknown'}";
        
        [TextArea]
        public string purpose = "${entity.lore?.purpose.replace(/"/g, '\"') || 'Purpose unknown'}";
        
        private void Start()
        {
            Debug.Log("${entity.name} initialized");
        }
        
        public string Interact()
        {
            Debug.Log("${entity.name} interacted with player");
            return "${entity.type} - ${entity.alignment}";
        }
        
${powerMethods}
    }
}
`;
}

/**
 * Generate Unity environment script (C#)
 */
function generateUnityEnvironmentScript(environment: EnvironmentConfig): string {
  const featuresProperties = environment.features ? environment.features.map((feature: Record<string, string>, idx: number) => {
    const featureName = Object.keys(feature)[0];
    const featureDesc = feature[featureName].replace(/"/g, '\"');
    
    return `        [Header("${featureName}")]
        [SerializeField, Tooltip("${featureDesc}")]
        private GameObject ${featureName.replace(/\s+/g, '')};
        
        public string ${featureName.replace(/\s+/g, '')}Description => "${featureDesc}";`;
  }).join('\n\n') : '';

  const seasonMethods = environment.seasons ? environment.seasons.map((season: { name: string; events: string[] }, idx: number) => {
    const methodName = `Activate${season.name.replace(/\s+/g, '')}Season`;
    const eventsList = season.events.map(event => `            Debug.Log("${event.replace(/"/g, '\"\'')}");`).join('\n');
    
    return `    /// <summary>
    /// Activates the ${season.name} season
    /// </summary>
    public void ${methodName}()
    {
        currentSeason = "${season.name}";
        Debug.Log("Changing to ${season.name} season");
        
        // Season events
${eventsList}
    }`;  
  }).join('\n\n') : '';

  return `using UnityEngine;
using System.Collections.Generic;

namespace Equorn
{
    /// <summary>
    /// ${environment.name} - ${environment.type}
    /// </summary>
    public class ${environment.name.replace(/\s+/g, '')} : MonoBehaviour
    {
        [Header("Environment Settings")]
        public string environmentType = "${environment.type}";
        private string currentSeason = "${environment.seasons?.[0]?.name || 'None'}";
        
        [Header("Features")]
${featuresProperties}

        private void Start()
        {
            Debug.Log("${environment.name} environment initialized");
        }

${seasonMethods}

        public Dictionary<string, string> GetFeatures()
        {
            var features = new Dictionary<string, string>();
            ${environment.features ? environment.features.map((feature: Record<string, string>) => {
              const key = Object.keys(feature)[0].replace(/\s+/g, '');
              return `features["${key}"] = ${key}Description;`;
            }).join('\n            ') : '// No features defined'}
            return features;
        }
    }
}
`;
}

/**
 * Generate Unity manager script (C#)
 */
function generateUnityManagerScript(seed: SeedConfig): string {
  const hasEntity = !!seed.entity;
  const hasEnvironment = !!seed.environment;
  
  const entityReference = hasEntity ? 
    `    [Header("Entity")]
    [SerializeField]
    private ${seed.entity?.name.replace(/\s+/g, '')} entity;` : '';
  
  const environmentReference = hasEnvironment ? 
    `    [Header("Environment")]
    [SerializeField]
    private ${seed.environment?.name.replace(/\s+/g, '')} environment;` : '';
  
  const setupReferences = [];
  if (hasEntity) {
    setupReferences.push(`        if (entity == null)
        {
            entity = FindObjectOfType<${seed.entity?.name.replace(/\s+/g, '')}>();
            if (entity == null)
            {
                Debug.LogWarning("No ${seed.entity?.name} found in scene. Creating one.");
                var entityObject = new GameObject("${seed.entity?.name}");
                entity = entityObject.AddComponent<${seed.entity?.name.replace(/\s+/g, '')}>();
            }
        }`);
  }
  
  if (hasEnvironment) {
    setupReferences.push(`        if (environment == null)
        {
            environment = FindObjectOfType<${seed.environment?.name.replace(/\s+/g, '')}>();
            if (environment == null)
            {
                Debug.LogWarning("No ${seed.environment?.name} found in scene. Creating one.");
                var environmentObject = new GameObject("${seed.environment?.name}");
                environment = environmentObject.AddComponent<${seed.environment?.name.replace(/\s+/g, '')}>();
            }
        }`);
  }
  
  return `using UnityEngine;
using UnityEngine.UI;
using System.Collections;

namespace Equorn
{
    /// <summary>
    /// Manager script for ${seed.name}
    /// </summary>
    public class ${seed.name.toLowerCase().replace(/\s+/g, '-')}Manager : MonoBehaviour
    {
        [Header("Project Info")]
        public string projectName = "${seed.name}";
        public string projectVersion = "${seed.version}";
        public string projectAuthor = "${seed.author}";
        
${entityReference}

${environmentReference}

        [Header("UI References")]
        [SerializeField]
        private Text titleText;
        
        [SerializeField]
        private Text descriptionText;

        private void Awake()
        {
            Debug.Log("Initializing ${seed.name} v${seed.version}");
            SetupReferences();
        }
        
        private void Start()
        {
            UpdateUI();
        }
        
        private void SetupReferences()
        {
${setupReferences.join('\n\n')}

            if (titleText == null)
            {
                Debug.LogWarning("Title Text not assigned.");
            }
            
            if (descriptionText == null)
            {
                Debug.LogWarning("Description Text not assigned.");
            }
        }
        
        private void UpdateUI()
        {
            if (titleText != null)
            {
                titleText.text = projectName;
            }
            
            if (descriptionText != null)
            {
                descriptionText.text = "${seed.description}";
            }
        }
    }
}
`;
}

/**
 * Generate Godot environment scene file content
 */
function generateGodotEnvironmentScene(environment: EnvironmentConfig): string {
  const featuresNodes = environment.features ? environment.features.map((feature: Record<string, string>, idx: number) => {
    const featureName = Object.keys(feature)[0];
    const featureDesc = feature[featureName];
    return `[node name="${featureName}" type="Node" parent="."]

[node name="Label" type="Label" parent="${featureName}"]
margin_left = 40
margin_top = ${100 + idx * 60}
margin_right = 600
margin_bottom = ${140 + idx * 60}
text = "${featureName}: ${featureDesc}"
`;
  }).join('\n') : '';

  return `[gd_scene format=2]

[node name="${environment.name}" type="Node"]

[node name="EnvironmentType" type="Label" parent="."]
margin_left = 40
margin_top = 40
margin_right = 600
margin_bottom = 80
text = "${environment.type}"

${featuresNodes}
`;
}

/**
 * Generate a web project from a seed
 */
async function generateWebProject(seed: SeedConfig, outputDir: string, verbose?: boolean): Promise<void> {
  // Determine project directory name
  const projectName = seed.name.toLowerCase().replace(/\s+/g, '-');
  const projectDir = path.join(outputDir, `${projectName}-web`);
  
  // Create project structure
  await fs.ensureDir(projectDir);
  await fs.ensureDir(path.join(projectDir, 'css'));
  await fs.ensureDir(path.join(projectDir, 'js'));
  await fs.ensureDir(path.join(projectDir, 'images'));
  await fs.ensureDir(path.join(projectDir, 'data'));
  
  if (verbose) {
    console.log(`Creating web project: ${projectName}`);
    console.log(`Project directory: ${projectDir}`);
  }

  // Generate CSS
  const theme = seed.export?.web?.theme || 'dark-nature';
  const cssContent = generateWebStylesheet(seed, theme);
  await fs.writeFile(path.join(projectDir, 'css', 'style.css'), cssContent);
  
  // Generate JavaScript
  const jsContent = generateWebJavaScript(seed);
  await fs.writeFile(path.join(projectDir, 'js', 'main.js'), jsContent);
  
  // Generate data JSON file
  await fs.writeFile(
    path.join(projectDir, 'data', 'seed.json'),
    JSON.stringify(seed, null, 2)
  );
  
  // Generate index.html
  const htmlContent = generateWebHTML(seed);
  await fs.writeFile(path.join(projectDir, 'index.html'), htmlContent);
  
  // Generate README
  await fs.writeFile(
    path.join(projectDir, 'README.md'),
    `# ${seed.name} - Web Project
${seed.description}

## Overview
- Version: ${seed.version}
- Author: ${seed.author}
- Generated by Equorn v0.1.0

## Getting Started
1. Open index.html in your browser or serve this directory with a local web server
2. For local development, you can use:
   - Live Server extension in VS Code
   - Python's http.server: \`python -m http.server\`
   - Node's http-server: \`npx http-server\`

## Project Structure
- index.html - Main HTML file
- css/ - Stylesheet directory
- js/ - JavaScript directory
- data/ - JSON data files
- images/ - Images (add your own)
`
  );
  
  if (verbose) {
    console.log(`Web project generated successfully at ${projectDir}`);
  }
}

/**
 * Generate web stylesheet based on seed and theme
 */
function generateWebStylesheet(seed: SeedConfig, theme: string): string {
  const headingFont = seed.export?.web?.fonts?.heading || 'Merriweather';
  const bodyFont = seed.export?.web?.fonts?.body || 'Montserrat';
  
  let colors = {
    background: '#0f172a',
    text: '#e2e8f0',
    primary: '#6366f1',
    secondary: '#14b8a6',
    accent: '#a855f7',
    card: '#1e293b',
    border: '#334155'
  };
  
  // Adjust colors based on theme
  if (theme === 'light') {
    colors = {
      background: '#f8fafc',
      text: '#334155',
      primary: '#4f46e5',
      secondary: '#0d9488',
      accent: '#9333ea',
      card: '#ffffff',
      border: '#e2e8f0'
    };
  } else if (theme === 'cosmic') {
    colors = {
      background: '#030712',
      text: '#e2e8f0',
      primary: '#8b5cf6',
      secondary: '#06b6d4',
      accent: '#ec4899',
      card: '#111827',
      border: '#374151'
    };
  }
  
  return `/* 
 * ${seed.name} - Generated by Equorn v0.1.0
 * Theme: ${theme}
 */

@import url('https://fonts.googleapis.com/css2?family=${headingFont.replace(/\s+/g, '+')}:wght@400;700&family=${bodyFont.replace(/\s+/g, '+')}:wght@400;500;600&display=swap');

:root {
  --color-bg: ${colors.background};
  --color-text: ${colors.text};
  --color-primary: ${colors.primary};
  --color-secondary: ${colors.secondary};
  --color-accent: ${colors.accent};
  --color-card: ${colors.card};
  --color-border: ${colors.border};
  --font-heading: '${headingFont}', serif;
  --font-body: '${bodyFont}', sans-serif;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background-color: var(--color-bg);
  color: var(--color-text);
  font-family: var(--font-body);
  line-height: 1.6;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

header {
  padding: 2rem 1rem;
  text-align: center;
  background: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.1)), 
              radial-gradient(circle at 50% 50%, var(--color-primary), transparent 70%);
  background-color: var(--color-bg);
  color: white;
  margin-bottom: 2rem;
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--font-heading);
  margin-bottom: 0.5rem;
  line-height: 1.2;
}

h1 {
  font-size: 2.5rem;
  background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
}

h2 {
  font-size: 1.8rem;
  color: var(--color-primary);
  margin-top: 1rem;
}

h3 {
  font-size: 1.3rem;
  color: var(--color-secondary);
}

a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color 0.3s ease;
}

a:hover {
  color: var(--color-secondary);
}

.container {
  width: 90%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.card {
  background-color: var(--color-card);
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
}

.entity-card {
  border-left: 4px solid var(--color-primary);
}

.environment-card {
  border-left: 4px solid var(--color-secondary);
}

.quest-card {
  border-left: 4px solid var(--color-accent);
}

.property-list {
  list-style: none;
  margin: 1rem 0;
}

.property-list li {
  padding: 0.5rem 0;
  border-bottom: 1px dashed var(--color-border);
  display: flex;
  justify-content: space-between;
}

.property-label {
  font-weight: 600;
  color: var(--color-secondary);
}

.tag {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
  border-radius: 0.25rem;
  background-color: var(--color-primary);
  color: white;
  font-size: 0.875rem;
}

footer {
  margin-top: auto;
  padding: 2rem 0;
  text-align: center;
  font-size: 0.875rem;
  color: var(--color-text);
  opacity: 0.7;
}

.tab-container {
  margin-bottom: 2rem;
}

.tab-buttons {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.tab-button {
  padding: 0.5rem 1rem;
  border: none;
  background-color: var(--color-card);
  color: var(--color-text);
  font-family: var(--font-body);
  cursor: pointer;
  border-radius: 0.25rem;
  transition: all 0.3s ease;
}

.tab-button.active {
  background-color: var(--color-primary);
  color: white;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

@media (max-width: 768px) {
  h1 {
    font-size: 2rem;
  }
  
  h2 {
    font-size: 1.5rem;
  }
  
  .tab-buttons {
    flex-direction: column;
  }
}
`;
}

/**
 * Generate JavaScript for web project
 */
function generateWebJavaScript(seed: SeedConfig): string {
  // Using raw string to avoid TypeScript parsing the JavaScript inside the template string
  return `// ${seed.name} - Generated by Equorn v0.1.0

document.addEventListener('DOMContentLoaded', function() {
  console.log('${seed.name} - Interactive Myth Engine');
  
  // Tab functionality
  setupTabs();
  
  // Load data
  loadSeedData();
});

// Set up tab navigation
function setupTabs() {
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Remove active class from all buttons and contents
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      
      // Add active class to current button
      button.classList.add('active');
      
      // Show the corresponding content
      const target = button.getAttribute('data-target');
      document.getElementById(target).classList.add('active');
    });
  });
}

// Load seed data from JSON
async function loadSeedData() {
  try {
    const response = await fetch('./data/seed.json');
    if (!response.ok) {
      throw new Error('Failed to load seed data');
    }
    
    const seedData = await response.json();
    console.log('Seed data loaded:', seedData);
    
    // You can use this data to dynamically update the UI if needed
    // For now, we'll just log it to the console
  } catch (error) {
    console.error('Error loading seed data:', error);
  }
}

// Handle entity interactions
function interactWithEntity(entityName) {
  console.log('Interacting with ' + entityName);
  // Add custom interaction logic here
  
  // Animation example
  const entityCard = document.querySelector('.entity-card[data-name="' + entityName + '"]');
  if (entityCard) {
    entityCard.classList.add('pulse');
    setTimeout(() => {
      entityCard.classList.remove('pulse');
    }, 1000);
  }
}
`;
}

/**
 * Generate HTML for web project
 */
function generateWebHTML(seed: SeedConfig): string {
  const entitySection = seed.entity ? `
        <div class="card entity-card" data-name="${seed.entity.name}">
          <h2>${seed.entity.name}</h2>
          <p class="entity-type">${seed.entity.type} - ${seed.entity.alignment}</p>
          
          ${seed.entity.lore ? `
          <div class="lore-section">
            <h3>Lore</h3>
            <ul class="property-list">
              <li>
                <span class="property-label">Origin</span>
                <span>${seed.entity.lore.origin}</span>
              </li>
              <li>
                <span class="property-label">Purpose</span>
                <span>${seed.entity.lore.purpose}</span>
              </li>
              <li>
                <span class="property-label">Weaknesses</span>
                <span>${seed.entity.lore.weaknesses}</span>
              </li>
            </ul>
          </div>
          ` : ''}
          
          ${seed.entity.powers ? `
          <div class="powers-section">
            <h3>Powers</h3>
            <div class="powers-list">
              ${seed.entity.powers.map(power => `
              <div class="card power-card">
                <h4>${power.name}</h4>
                <p>${power.description}</p>
              </div>
              `).join('')}
            </div>
          </div>
          ` : ''}
          
          <button class="interact-button" onclick="interactWithEntity('${seed.entity.name}')">Interact</button>
        </div>
  ` : '';

  const environmentSection = seed.environment ? `
        <div class="card environment-card">
          <h2>${seed.environment.name}</h2>
          <p class="environment-type">${seed.environment.type}</p>
          
          ${seed.environment.features ? `
          <div class="features-section">
            <h3>Features</h3>
            <ul class="property-list">
              ${seed.environment.features.map(feature => {
                const featureName = Object.keys(feature)[0];
                return `<li>
                  <span class="property-label">${featureName}</span>
                  <span>${feature[featureName]}</span>
                </li>`;
              }).join('')}
            </ul>
          </div>
          ` : ''}
          
          ${seed.environment.seasons ? `
          <div class="seasons-section">
            <h3>Seasons</h3>
            <div class="seasons-list">
              ${seed.environment.seasons.map(season => `
              <div class="card season-card">
                <h4>${season.name}</h4>
                <ul>
                  ${season.events.map(event => `<li>${event}</li>`).join('')}
                </ul>
              </div>
              `).join('')}
            </div>
          </div>
          ` : ''}
        </div>
  ` : '';

  const questsSection = seed.quests ? `
        <div class="quests-section">
          <h2>Quests</h2>
          ${seed.quests.map(quest => `
          <div class="card quest-card">
            <h3>${quest.name}</h3>
            <ul class="property-list">
              <li>
                <span class="property-label">Trigger</span>
                <span>${quest.trigger}</span>
              </li>
              <li>
                <span class="property-label">Objective</span>
                <span>${quest.objective}</span>
              </li>
            </ul>
          </div>
          `).join('')}
        </div>
  ` : '';
  
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${seed.name}</title>
  <link rel="stylesheet" href="./css/style.css">
</head>
<body>
  <header>
    <h1>${seed.name}</h1>
    <p>${seed.description}</p>
  </header>
  
  <div class="container">
    <div class="tab-container">
      <div class="tab-buttons">
        <button class="tab-button active" data-target="overview">Overview</button>
        ${seed.entity ? `<button class="tab-button" data-target="entity">Entity</button>` : ''}
        ${seed.environment ? `<button class="tab-button" data-target="environment">Environment</button>` : ''}
        ${seed.quests ? `<button class="tab-button" data-target="quests">Quests</button>` : ''}
      </div>
      
      <div id="overview" class="tab-content active">
        <div class="card">
          <h2>About</h2>
          <ul class="property-list">
            <li>
              <span class="property-label">Name</span>
              <span>${seed.name}</span>
            </li>
            <li>
              <span class="property-label">Version</span>
              <span>${seed.version}</span>
            </li>
            <li>
              <span class="property-label">Author</span>
              <span>${seed.author}</span>
            </li>
          </ul>
        </div>
        
        ${seed.entity ? `
        <div class="card summary-card">
          <h2>${seed.entity.name}</h2>
          <p>${seed.entity.type} - ${seed.entity.alignment}</p>
        </div>
        ` : ''}
        
        ${seed.environment ? `
        <div class="card summary-card">
          <h2>${seed.environment.name}</h2>
          <p>${seed.environment.type}</p>
        </div>
        ` : ''}
      </div>
      
      ${seed.entity ? `
      <div id="entity" class="tab-content">
        ${entitySection}
      </div>
      ` : ''}
      
      ${seed.environment ? `
      <div id="environment" class="tab-content">
        ${environmentSection}
      </div>
      ` : ''}
      
      ${seed.quests ? `
      <div id="quests" class="tab-content">
        ${questsSection}
      </div>
      ` : ''}
    </div>
  </div>
  
  <footer>
    <p>Generated by Equorn v0.1.0 | ${new Date().getFullYear()}</p>
  </footer>
  
  <script src="./js/main.js"></script>
</body>
</html>
`;
}

/**
 * Generate documentation from a seed
 */
async function generateDocsProject(seed: SeedConfig, outputDir: string, verbose?: boolean): Promise<void> {
  // Determine project directory name
  const projectName = seed.name.toLowerCase().replace(/\s+/g, '-');
  const docsDir = path.join(outputDir, `${projectName}-docs`);
  
  // Create docs directory structure
  await fs.ensureDir(docsDir);
  await fs.ensureDir(path.join(docsDir, 'assets'));
  await fs.ensureDir(path.join(docsDir, 'entities'));
  await fs.ensureDir(path.join(docsDir, 'environments'));
  await fs.ensureDir(path.join(docsDir, 'quests'));
  
  if (verbose) {
    console.log(`Creating documentation for: ${projectName}`);
    console.log(`Docs directory: ${docsDir}`);
  }
  
  // Generate main README.md
  await fs.writeFile(
    path.join(docsDir, 'README.md'),
    generateMainReadme(seed)
  );
  
  // Generate entity documentation
  if (seed.entity) {
    await fs.writeFile(
      path.join(docsDir, 'entities', 'index.md'),
      generateEntityDoc(seed.entity)
    );
  }
  
  // Generate environment documentation
  if (seed.environment) {
    await fs.writeFile(
      path.join(docsDir, 'environments', 'index.md'),
      generateEnvironmentDoc(seed.environment)
    );
  }
  
  // Generate quests documentation
  if (seed.quests && seed.quests.length > 0) {
    await fs.writeFile(
      path.join(docsDir, 'quests', 'index.md'),
      generateQuestsDoc(seed.quests)
    );
    
    // Generate individual quest docs
    for (const quest of seed.quests) {
      const questFileName = quest.name.toLowerCase().replace(/\s+/g, '-') + '.md';
      await fs.writeFile(
        path.join(docsDir, 'quests', questFileName),
        generateQuestDetailDoc(quest)
      );
    }
  }
  
  // Generate a sample mkdocs.yml file for MkDocs integration
  await fs.writeFile(
    path.join(docsDir, 'mkdocs.yml'),
    generateMkdocsConfig(seed)
  );
  
  if (verbose) {
    console.log(`Documentation generated successfully at ${docsDir}`);
  }
}

// Helper functions for generating documentation
function generateMainReadme(seed: SeedConfig): string {
  return `# ${seed.name}
${seed.description}

## Overview
- Version: ${seed.version}
- Author: ${seed.author}
- Generated by Equorn v0.1.0

## Contents

${seed.entity ? `- [Entity: ${seed.entity.name}](./entities/index.md)\n` : ''}

## Getting Started

You can browse this documentation as Markdown files directly, or you can use a static site generator like MkDocs to create a beautiful website:

\`\`\`bash
# Install MkDocs
pip install mkdocs

# Serve the documentation locally
mkdocs serve

# Build the site
mkdocs build
\`\`\`

A sample \`mkdocs.yml\` configuration file has been included for your convenience.

## Seed Data

The original seed used to generate this documentation and associated projects contains the following primary elements:

${seed.entity ? `- **Entity**: ${seed.entity.name} (${seed.entity.type || 'N/A'})
` : ''}
${seed.environment ? `- **Environment**: ${seed.environment.name} (${seed.environment.type || 'N/A'})
` : ''}
${seed.quests && seed.quests.length > 0 ? `- **Quests**: ${seed.quests.length} quest(s)
` : ''}

## Export Targets

This seed can be exported to the following targets:

- **Godot**: A complete 2D/3D game scene with interactable entities and environment
- **Unity**: A Unity project with C# scripts for all entities and environments
- **Web**: An interactive web experience using modern JavaScript and CSS
- **Docs**: This documentation (what you're reading now)

## Navigation

- [Entities](./entities/index.md)
- [Environments](./environments/index.md)
${seed.quests && seed.quests.length > 0 ? '- [Quests](./quests/index.md)' : ''}
`;
}

/**
 * Generate the entity documentation
 */
function generateEntityDoc(entity: EntityConfig): string {
  return `# Entity: ${entity.name}

**Type**: ${entity.type}  
**Alignment**: ${entity.alignment}

${entity.description ? '## Description\n\n' + entity.description + '\n\n' : ''}

## Lore

${entity.lore ? `
- **Origin**: ${entity.lore.origin}
- **Purpose**: ${entity.lore.purpose}
- **Weaknesses**: ${entity.lore.weaknesses}
` : 'No lore available for this entity.'}

## Powers

${entity.powers && entity.powers.length ? formatPowers(entity, entity.powers) : 'This entity has no defined powers.'}

## Interactions

${entity.interactions && entity.interactions.length ? entity.interactions.map(interaction => `- **${interaction.trigger}**: ${interaction.response}`).join('\n') : 'No specific interactions defined for this entity.'}
`;
}

function generateEnvironmentDoc(environment: EnvironmentConfig): string {
  return `# Environment: ${environment.name}

**Type**: ${environment.type}

${environment.description ? '## Description\n\n' + environment.description + '\n\n' : ''}

## Features

${environment.features && environment.features.length ? environment.features.map(feature => {
    const featureName = Object.keys(feature)[0];
    return `- **${featureName}**: ${feature[featureName]}`;
  }).join('\n') : 'No specific features defined for this environment.'}

## Seasons

${environment.seasons && environment.seasons.length ? environment.seasons.map(season => `### ${season.name}

Events during this season:
${season.events.map(event => `- ${event}`).join('\n')}
`).join('\n') : 'No seasons defined for this environment.'}

## Atmosphere

${environment.atmosphere ? `
- **Sound**: ${environment.atmosphere.sound || 'Not specified'}
- **Light**: ${environment.atmosphere.light || 'Not specified'}
- **Weather**: ${environment.atmosphere.weather || 'Not specified'}
` : 'No atmospheric details specified for this environment.'}
`;
}

function generateQuestsDoc(quests: SeedConfig['quests']): string {
  if (!quests || !quests.length) return '# Quests\n\nNo quests defined in this seed.';
  
  return `# Quests

This seed contains ${quests.length} quest(s) that can be undertaken within the mythological framework.

## Quest List

${quests.map((quest, index) => `${index + 1}. [${quest.name}](./${quest.name.toLowerCase().replace(/\s+/g, '-')}.md) - ${quest.objective}`).join('\n')}

## Quest Overview

${quests.map(quest => `### ${quest.name}

- **Trigger**: ${quest.trigger}
- **Objective**: ${quest.objective}
- **Reward**: ${quest.reward || 'Not specified'}

[View full details](./${quest.name.toLowerCase().replace(/\s+/g, '-')}.md)
`).join('\n')}
`;
}

function generateQuestDetailDoc(quest: NonNullable<SeedConfig['quests']>[number]): string {
  return `# Quest: ${quest.name}

## Overview

**Trigger**: ${quest.trigger}  
**Objective**: ${quest.objective}  
**Reward**: ${quest.reward || 'Not specified'}

${quest.description ? '## Description\n\n' + quest.description + '\n\n' : ''}

## Steps

${quest.steps && quest.steps.length ? quest.steps.map((step, index) => `### Step ${index + 1}: ${step.name || 'Unnamed Step'}

${step.description || 'No description provided.'}

${step.hints && step.hints.length ? '**Hints**:\n' + step.hints.map((hint: string) => `- ${hint}`).join('\n') : ''}
`).join('\n') : 'This quest has no defined steps.'}

## Completion

${quest.completion || 'Complete the objective to finish this quest.'}

${quest.followup ? '## Follow-Up\n\n' + quest.followup + '\n' : ''}
`;
}

function generateMkdocsConfig(seed: SeedConfig): string {
  return `# MkDocs Configuration for ${seed.name}
# Generated by Equorn v0.1.0

site_name: ${seed.name} Documentation
site_description: ${seed.description}
site_author: ${seed.author}

nav:
  - Home: index.md
  ${seed.entity ? '- Entity:\n    - Overview: entities/index.md\n' : ''}${seed.environment ? '  - Environment:\n    - Overview: environments/index.md\n' : ''}${seed.quests && seed.quests.length ? '  - Quests:\n    - Overview: quests/index.md\n' + seed.quests.map(quest => `    - ${quest.name}: quests/${quest.name.toLowerCase().replace(/\s+/g, '-')}.md\n`).join('') : ''}

theme:
  name: material
  palette:
    primary: indigo
    accent: amber
  features:
    - navigation.tabs
    - navigation.sections
    - toc.integrate
    - search.suggest
    - search.highlight

markdown_extensions:
  - admonition
  - codehilite
  - footnotes
  - meta
  - toc:
      permalink: true
  - pymdownx.highlight
  - pymdownx.superfences

extra_css:
  - assets/extra.css
`;
}
